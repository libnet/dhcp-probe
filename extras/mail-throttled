#!/usr/local/bin/perl5

# $Header: /usr/local/etc/RCS/mail-throttled,v 1.8 2008/08/05 17:21:42 root Exp $

# mail-throttled [-D dbm_file] -k key -t throttle_seconds [-f from] -r recipient [-d] [-s subject]
#
# Sends mail body (read from STDIN) to 'recipient', but avoids doing so "too frequently."
#
# You provide a 'key', which is an arbitrary string used to identify this notification.
# You also provide 'throttle_seconds', an integer.  If we've sent anything that
# specified this 'key' within the last 'throttle_seconds', we do not send the message.
# Otherwise, we send the message, and the remember that we've sent a message for this 'key'
# at the current time.
#
# This key/timesent tuples are stored on-disk, in a dbm.  As a result, the 'key'
# you supply must satisfy the syntactic requirements for dbm keys.  
# The caller needs to have permission to read and write this DBM (and create it if
# it does not already exist).  If you fail to specify a dbm_file, we'll use a default
# value, which may not be what you want (since the caller might not be able to r/w that
# particular DBM).
# We never clean this dbm.  You can safely erase it entirely, if you don't mind losing
# the state, and you know the caller has permission to create a new instance of the DBM.
#
# The 'recipient' should be a valid email address.  Naturally, it should not
# be one that will cause any ack or bounce mail to return to us!
# If there are several addresses (delimited by spaces), be sure to quote them as a single arg.
#
# If a subject is specified, be sure to quote it if it contains any spaces or other shell
# metachars.
#
# Irwin Tillman

use Getopt::Std;
use GDBM_File;

use strict;
use warnings;

use vars qw($DBM_FILE_DEFAULT $MAILCMD $MAILCMD_OPTS $FROM_DEFAULT);
$DBM_FILE_DEFAULT = '/usr/local/lib/mail-throttled.gdbm';
$MAILCMD = "/usr/lib/sendmail";
# $MAILCMD_OPTS = "-t -ODeliveryMode=queueonly";
$MAILCMD_OPTS = "-t"; 
$FROM_DEFAULT = "root";

(my $prog = $0) =~ s/.*\///;

use vars qw($opt_f $opt_D $opt_d $opt_k $opt_r $opt_t $opt_s);
&getopts('dD:f:k:r:s:t:');

my $debug = $opt_d || "";
my $dbm_file = $opt_D || $DBM_FILE_DEFAULT;
my $key = $opt_k || "";
my $from = $opt_f || $FROM_DEFAULT;
my $recipient = $opt_r || "";
my $throttle_secs = $opt_t || 1;
my $subject = $opt_s || "";

warn "${prog}:\nkey=$key\nthrottle_secs=$throttle_secs\nfrom=$from\nrecipient=$recipient\nsubject=$subject\n" if $debug;

# certain options and args are required
&Usage() unless ($key && $throttle_secs && $recipient);

my %last_sent = ();
unless (tie(%last_sent, 'GDBM_File', $dbm_file, &GDBM_WRCREAT, 0644)) {
	warn "${prog}: can't tie ${dbm_file}: $!\n";
	exit 10;
}

my @mailbody = "";
@mailbody = <STDIN>; # read it even if we decide not to send it

my $now = time;

warn "now = $now\n" if $debug;

$last_sent{$key} = 0 unless defined($last_sent{$key}); # so it's defined before we use it in subtraction (placate use strict)

if ($now - $last_sent{$key} >= $throttle_secs) {
	warn "last_sent = $last_sent{$key}, will send\n" if $debug;
	unless (open(MAIL, "| $MAILCMD $MAILCMD_OPTS -f\"$from\"")) {
		warn "${prog}: error executing '${MAILCMD}': open(): $!\n";
		exit 20;
	}
	print MAIL	"From: $from\n",
				"To: $recipient\n",
				($subject ? "Subject: $subject\n" : "") ,
				"\n",
				@mailbody;
	unless (close(MAIL)) {
		warn("${prog}: error executing '${MAILCMD}': close(): " .
			($! ?
				"syserror closing pipe: $!"
				:
				"wait status $? from pipe"
			) .
			"\n"
		);
		exit 21;
	}

	$last_sent{$key} = $now;
} else {
	warn "last_sent = $last_sent{$key}, suppressing\n" if $debug;
}

untie %last_sent;

exit 0;



sub Usage {
	warn "Usage: $prog [-D dbm_file] -k key -t throttle_seconds [-f from] -r recipient [-s subject]\n";
	exit 1;
}
